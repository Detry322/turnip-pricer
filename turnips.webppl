var getNextPattern = function(pattern) {
  // These probabilities come from [[0.2, 0.3, 0.15, 0.35], [0.5, 0.05, 0.20, 0.25], [0.25, 0.45, 0.05, 0.25], [0.45, 0.25, 0.15, 0.15]]^10000
  if (!pattern && pattern !== 0) {
    return sample(Discrete({ps: [0.346277, 0.247363, 0.147607, 0.258752]}));
  }
  var chance = sample(RandomInteger({n: 100}));
  if (pattern == 0) {
      if (chance < 20)
      {
        return 0;
      }
      else if (chance < 50)
      {
        return 1;
      }
      else if (chance < 65)
      {
        return 2;
      }
      else
      {
        return 3;
      }
  } else if (pattern == 1) {
      if (chance < 50)
      {
        return 0;
      }
      else if (chance < 55)
      {
        return 1;
      }
      else if (chance < 75)
      {
        return 2;
      }
      else
      {
        return 3;
      }
  } else if (pattern == 2) {
      if (chance < 25)
      {
        return 0;
      }
      else if (chance < 70)
      {
        return 1;
      }
      else if (chance < 75)
      {
        return 2;
      }
      else
      {
        return 3;
      }
  } else if (pattern == 3) {
      if (chance < 45)
      {
        return 0;
      }
      else if (chance < 70)
      {
        return 1;
      }
      else if (chance < 85)
      {
        return 2;
      }
      else
      {
        return 3;
      }
    }
  return 2;
}

var decPhaseHelper = function(dist, count, constDecrease, a, b, observations) {
  if (count <= 0) {
    return [];
  }
  if (count != observations.length) {
    console.log(count, observations.length, "these are not equal");
  }
  var thisRate = observe(dist, observations[0]);
  var nextDist = Uniform({a: (thisRate - constDecrease - b), b: (thisRate - constDecrease - a)});
  return [thisRate].concat(decPhaseHelper(nextDist, count - 1, constDecrease, a, b, observations.slice(1)));
}

var pattern0 = function(observations) {
  var decPhaseLen1 = flip() ? 3 : 2;
  var decPhaseLen2 = 5 - decPhaseLen1;
  var hiPhaseLen1 = sample(RandomInteger({n: 7}));
  var hiPhaseLen2and3 = 7 - hiPhaseLen1;
  var hiPhaseLen3 = sample(RandomInteger({n: hiPhaseLen2and3}));
  var hiPhaseLen2 = hiPhaseLen2and3 - hiPhaseLen3;
  
  var hiPhase1Observations = observations.slice(0, hiPhaseLen1);
  var hiPhase1 = mapN(function(i) {
    return observe(Uniform({a: 0.9, b: 1.4}), hiPhase1Observations[i]);
  }, hiPhaseLen1);
  var hiPhase2Observations = observations.slice(hiPhaseLen1 + decPhaseLen1, hiPhaseLen1 + decPhaseLen1 + hiPhaseLen2);
  var hiPhase2 = mapN(function(i) {
    return observe(Uniform({a: 0.9, b: 1.4}), hiPhase2Observations[i]);
  }, hiPhaseLen2);
  var hiPhase3Observations = observations.slice(hiPhaseLen1 + decPhaseLen1 + hiPhaseLen2 + decPhaseLen2);
  var hiPhase3 = mapN(function(i) {
    return observe(Uniform({a: 0.9, b: 1.4}), hiPhase3Observations[i]);
  }, hiPhaseLen3);
  
  var ratePhase1 = (Uniform({a: 0.6, b: 0.8}));
  var ratePhase2 = (Uniform({a: 0.6, b: 0.8}));
  var decPhase1Observations = observations.slice(hiPhaseLen1, hiPhaseLen1 + decPhaseLen1);
  var decPhase1 = decPhaseHelper(ratePhase1, decPhaseLen1, 0.04, 0, 0.06, decPhase1Observations);
  var decPhase2Observations = observations.slice(hiPhaseLen1 + decPhaseLen1 + hiPhaseLen2, hiPhaseLen1 + decPhaseLen1 + hiPhaseLen2 + decPhaseLen2);
  var decPhase2 = decPhaseHelper(ratePhase2, decPhaseLen2, 0.04, 0, 0.06, decPhase2Observations);
  return hiPhase1.concat(decPhase1).concat(hiPhase2).concat(decPhase2).concat(hiPhase3);
}

var pattern1 = function(observations) {
  var peakStart = sample(RandomInteger({n: 7})) + 1;
  var decRate = (Uniform({a: 0.85, b: 0.9}));
  var decPhaseObservations = observations.slice(0, peakStart);
  var decPhase = decPhaseHelper(decRate, peakStart, 0.03, 0, 0.02, decPhaseObservations);
  var middlePhaseObservations = observations.slice(peakStart, peakStart + 5)
  var middlePhase = [
    observe(Uniform({a: 0.9, b: 1.4}), middlePhaseObservations[0]),
    observe(Uniform({a: 1.4, b: 2.0}), middlePhaseObservations[1]),
    observe(Uniform({a: 2.0, b: 6.0}), middlePhaseObservations[2]),
    observe(Uniform({a: 1.4, b: 2.0}), middlePhaseObservations[3]),
    observe(Uniform({a: 0.9, b: 1.4}), middlePhaseObservations[4])
  ];
  var lowPhaseObservations = observations.slice(peakStart + 5)
  var lowPhase = mapN(function(i) {
    return observe(Uniform({a: 0.4, b: 0.9}), lowPhaseObservations[i]);
  }, 7 - peakStart);
  return decPhase.concat(middlePhase).concat(lowPhase);
}

var pattern2 = function(observations) {
  var startRate = Uniform({a: 0.85, b: 0.9});
  return decPhaseHelper(startRate, 12, 0.03, 0, 0.02, observations);
}

var pattern3 = function(observations) {
  var peakStart = sample(RandomInteger({n: 8}));
  
  var decPhaseRate = (Uniform({a: 0.4, b: 0.9}));
  var decPhaseObservations = observations.slice(0, peakStart);
  var decPhase = decPhaseHelper(decPhaseRate, peakStart, 0.03, 0, 0.02, decPhaseObservations);
  
  var middlePhaseObservations = observations.slice(peakStart, peakStart + 5)
  var middlePhaseRate = observe(Uniform({a: 1.4, b: 2.0}), middlePhaseObservations[3]);
  var middlePhase = [
    observe(Uniform({a: 0.9, b: 1.4}), middlePhaseObservations[0]),
    observe(Uniform({a: 0.9, b: 1.4}), middlePhaseObservations[1]),
    observe(Uniform({a: 1.4, b: middlePhaseRate}), middlePhaseObservations[2]),
    middlePhaseRate,
    observe(Uniform({a: 1.4, b: middlePhaseRate}), middlePhaseObservations[4]),
  ];
  
  var decPhase2Observations = observations.slice(peakStart + 5)
  var decPhaseRate2 = (Uniform({a: 0.4, b: 0.9}));
  var decPhase2 = decPhaseHelper(decPhaseRate2, 7 - peakStart, 0.03, 0, 0.02, decPhase2Observations);
  return decPhase.concat(middlePhase).concat(decPhase2);
}

var turnipPrices = function(prevPattern) {
  var observations = [
    80.0/95,
    77.0/95,
    73.0/95,
    70.0/95,
    95.0/95,
    147.0/95,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    // undefined,
    // undefined,
    // undefined,
    // undefined,
    // undefined,
    // undefined,
  ]
  var pattern = getNextPattern(prevPattern);
  if (pattern == 0) {
    return pattern0(observations);
  } else if (pattern == 1) {
    return pattern1(observations);
  } else if (pattern == 2) {
    return pattern2(observations);
  } else if (pattern == 3) {
    return pattern3(observations);
  }
}

var dist = Infer(
  {method: 'SMC', particles: 10000, rejuvSteps: 100},
  turnipPrices);

csv.writeJoint(dist, 'output.csv')
